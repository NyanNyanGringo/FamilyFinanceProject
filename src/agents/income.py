"""
–ê–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Ö–æ–¥–æ–≤.
"""
from .base import BaseAgent, AgentRequest, AgentResponse
from lib.utilities.google_utilities import (
    RequestData, ListName, Category, Status,
    insert_and_update_row_batch_update
)
from lib.utilities.openai_utilities import (
    request_data, RequestBuilder, ResponseFormat, MessageRequest
)


class IncomeAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ—Ö–æ–¥–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤."""
        super().__init__("IncomeAgent")
    
    async def process(self, request: AgentRequest) -> AgentResponse:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞.
        
        Args:
            request: –ó–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–æ—Ö–æ–¥–µ
            
        Returns:
            AgentResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            validation_error = await self.validate_request(request)
            if validation_error:
                return self.create_error_response(validation_error)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ OpenAI
            income_details = await self._extract_income_details(request.user_message)
            
            if not income_details:
                return self.create_error_response(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"
                )
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–∞
            validation_result = self._validate_income_data(income_details)
            if not validation_result['valid']:
                return AgentResponse(
                    success=False,
                    message=validation_result['message'],
                    errors=validation_result['errors'],
                    needs_clarification=True,
                    clarification_message=validation_result['message']
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            success_message = self._format_success_message(income_details)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è message_id
            request.context.user_data['pending_income_data'] = income_details
            request.context.user_data['pending_operation_type'] = 'income'
            
            return self.create_success_response(
                message=success_message,
                data=income_details
            )
            
        except Exception as e:
            self.logger.error(f"Error processing income: {str(e)}")
            return self.create_error_response(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Ö–æ–¥–∞: {str(e)}")
    
    async def _extract_income_details(self, user_message: str) -> dict:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –¥–æ—Ö–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OpenAI.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –î–µ—Ç–∞–ª–∏ –¥–æ—Ö–æ–¥–∞
        """
        try:
            response = request_data(
                RequestBuilder(
                    message_request=MessageRequest(
                        user_message=user_message
                    ).basic_request_message,
                    response_format=ResponseFormat().incomes_response_format
                )
            )
            
            return response
            
        except Exception as e:
            self.logger.error(f"Error extracting income details: {str(e)}")
            return {}
    
    def _validate_income_data(self, income_data: dict) -> dict:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–∞.
        
        Args:
            income_data: –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∫–ª—é—á–∞–º–∏ 'valid', 'message', 'errors'
        """
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not income_data.get('amount'):
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–∞")
        
        if not income_data.get('incomes_category'):
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞")
        elif income_data['incomes_category'] not in Category.get_incomes():
            errors.append(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {income_data['incomes_category']}")
        
        if not income_data.get('account'):
            errors.append("–ù–µ —É–∫–∞–∑–∞–Ω —Å—á—ë—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è")
        elif income_data['account'] not in Category.get_accounts():
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—á—ë—Ç: {income_data['account']}")
        
        if errors:
            return {
                'valid': False,
                'message': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n" + "\n".join(errors),
                'errors': errors
            }
        
        return {'valid': True, 'message': '', 'errors': []}
    
    def _create_google_request(self, income_data: dict) -> RequestData:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Google Sheets.
        
        Args:
            income_data: –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞
            
        Returns:
            RequestData: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Google Sheets
        """
        return RequestData(
            list_name=ListName.incomes,
            incomes_category=income_data.get('incomes_category'),
            account=income_data.get('account'),
            amount=income_data.get('amount'),
            status=income_data.get('status', Status.committed),
            comment=income_data.get('comment', '')
        )
    
    def _format_success_message(self, income_data: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞.
        
        Args:
            income_data: –î–∞–Ω–Ω—ã–µ –¥–æ—Ö–æ–¥–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return (
            f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"üí∞ –°—É–º–º–∞: {income_data['amount']}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {income_data['incomes_category']}\n"
            f"üí≥ –°—á—ë—Ç: {income_data['account']}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {income_data.get('comment', '–ù–µ—Ç')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {income_data.get('status', Status.committed)}"
        )
